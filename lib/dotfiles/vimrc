" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" This is a hacked method of determining the platform we are on...
let s:platform = system("uname")
let s:on_linux = s:platform =~? "linux"
let s:on_mac   = has('macunix') || s:platform =~? 'Darwin'

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
Bundle 'L9'

Bundle 'comments.vim'
Bundle 'rails.vim'
Bundle 'ctrlp.vim'
" non github repos
Bundle 'railscasts'
Bundle 'ack.vim'
Bundle 'cucumber.zip'
Bundle 'VimClojure'
Bundle 'mru.vim'
Bundle 'The-NERD-tree'
Bundle 'camelcasemotion'
Bundle 'fugitive.vim'
Bundle 'https://github.com/jpalardy/vim-slime.git'

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup
set nowritebackup
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

  "-------- Autocommands
  autocmd! BufWritePost .vimrc source %

  "------- Rails autocmds
  autocmd User Rails Rnavcommand feature features -suffix=.feature
  autocmd User Rails Rnavcommand steps features/step_definitions -suffix=_steps.rb

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

if has("folding")
  set foldenable
  set foldmethod=syntax
  set foldlevel=999
  set foldnestmax=999
  set foldtext=strpart(getline(v:foldstart),0,50).'\ ...\'.substitute(getline(v:foldend),'^[\ #]*','','g').'\ '
endif

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Always display the status line
set laststatus=2

"-------- Mappings
"Set the map leader...this is the default character, just put it in here
" to be explicit. Mappings which include "<leader>" would start with this
" charachter. For example. "map <leader>f <some_command>" would create a mapping for
" ,-f (comma-f) to '<some_command>'
let mapleader = ","

" Edit the README_FOR_APP (makes :R commands work)
map <Leader>R :e doc/README_FOR_APP<CR>

" Leader shortcuts for Rails commands
map <Leader>m :Rmodel 
map <Leader>c :Rcontroller 
map <Leader>v :Rview 
map <Leader>u :Runittest 
map <Leader>f :Rfeature 
map <Leader>tm :RTmodel 
map <Leader>tc :RTcontroller 
map <Leader>tv :RTview 
map <Leader>tu :RTunittest 
map <Leader>tf :RTfeature 
map <Leader>sm :RSmodel 
map <Leader>sc :RScontroller 
map <Leader>sv :RSview 
map <Leader>su :RSunittest 
map <Leader>sf :RSfeature 
map <Leader>vm :RVmodel 
map <Leader>vc :RVcontroller 
map <Leader>vv :RVview 
map <Leader>vu :RVunittest 
map <Leader>vf :RVfeature 
map <Leader>qq :sp ~/.vimrc<CR><C-W>_ 

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" No Help, please
nmap <F1> <Esc>

" Emacs 
"map! <C-A> <Home>
"map! <C-E> <End>

" Display extra whitespace
set list 
set listchars=tab:>-,trail:.

" Edit routes
command! Rroutes :e config/routes.rb
command! RTroutes :tabe config/routes.rb

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

" Use Ack instead of Grep when available
if executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --nocolor
endif

" Color scheme
colorscheme railscasts
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

" Numbers
set number
set numberwidth=5

" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu
set wildmode=list:longest,list:full

" case only matters with mixed case expressions
set ignorecase
set smartcase

"Switch to the next "higher" windows with <C-K>
noremap <C-J> <C-W>j<C-W>_

"Switch to the next "higher" windows with <C-J>
noremap <C-K> <C-W>k<C-W>_

"-------- NERDTree settings
"Toggle NERDTree window using F3 key
"noremap <F3> :NERDTreeToggle<CR>
noremap <C-s> :NERDTreeToggle<CR>

"Ignore files
let NERDTreeIgnore=['\.beam$']


"-------- Most Recently Used File (MRU) plugin mapping & config
"Open Most Recently Used window with Ctl+o
"noremap <C-o> :MRU<CR>

"Set max entries in MRU option window
let MRU_Max_Entries = 30

"Gist (http://gist.github.com) integration
" Gist plugin options. Be sure to add a 'github'
" section to your global .gitconfig file.
" Example of .gitconfig section:
" [github]
"   user = <your username>
"   token = <your account token>
" Set up clipboard to use OS X's 'pbcopy' command
"if s:on_mac
  "let g:gist_clip_command = 'pbcopy'
"elseif s:on_linux
  "let g:gist_clip_command = 'xclip -selection clipboard'
"endif

let g:gist_clip_command = 'pbcopy'

"Some settings for VimClojure - see http://www.duenas.at/new_homepage/vimclojure
let vimclojure#HighlightBuiltins   = 1
let vimclojure#ParenRainbow  = 1
au BufNewFile,BufRead *.cljs setf clojure

"-------- Tab mappings
"Close tabs with tc
noremap tc :tabclose<CR>

"Create new tab with Ctl+t
noremap tt :tabnew<CR>

"-------- Abbreviations
"Some lorem ispum text
abbreviate lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum bibendum hendrerit ante. Phasellus vitae enim id erat fringilla fermentum.  Pellentesque tellus. Cras eros magna, pretium ac, tincidunt id, tincidunt eget, mi. Fusce tristique sollicitudin eros. Nam augue nisi, volutpat non, cursus a, aliquam ac, magna. Sed rhoncus, ipsum vitae semper ultrices, ante nunc faucibus nunc, sed iaculis elit metus condimentum turpis. Suspendisse suscipit. Nulla eget nulla. Aliquam varius sem quis tortor. Proin eu dolor a lacus lobortis luctus. Phasellus interdum. Maecenas quis sem. Nulla facilisi.

" MISC COMMANDS
command! Wsudo w !sudo tee %

"-------- Local Overrides
"If you have options you'd like to override locally for
"some reason (don't want to store something in a
"publicly-accessible repository, machine-specific settings, etc.),
"you can create a '.local_vimrc' file in your home directory
"(ie: ~/.local_vimrc) and it will be 'sourced' here and override
"any settings in this file.
"
"NOTE: YOU MAY NOT WANT TO ADD ANY LINES BELOW THIS
if filereadable(expand('~/.local_vimrc'))
  source ~/.local_vimrc
end
